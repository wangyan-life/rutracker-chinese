name: Auto Build & Release

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies (skip puppeteer download)
        run: |
          export PUPPETEER_SKIP_DOWNLOAD=1
          npm ci

      - name: Build
        run: |
          export PUPPETEER_SKIP_DOWNLOAD=1
          npm run build
      - name: Commit built dist userscript (if changed)
        run: |
          # configure git author
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # ensure we have the latest refs
          git fetch origin main --depth=1 || true
          # check for changes to the built userscript
          if git status --porcelain | grep -q "dist/rutracker-chinese.user.js"; then
            git add dist/rutracker-chinese.user.js
            git commit -m "chore(build): update dist/rutracker-chinese.user.js [skip ci]" || true
            git push origin HEAD:main || true
          else
            echo "No changes to dist/rutracker-chinese.user.js"
          fi
      - name: Create/Update prerelease
        id: prerelease
        uses: softprops/action-gh-release@v1
        with:
          tag_name: prerelease-${{ github.sha }}
          name: "Pre-release ${{ github.sha }}"
          body: |
            Automated pre-release build for commit ${{ github.sha }}.
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Zip dist for release
        run: |
          if [ -d dist ] && [ -f dist/rutracker-chinese.user.js ]; then
            cd dist
            zip -j rutracker-chinese.zip rutracker-chinese.user.js || true
            cd -
          fi

      - name: Get current and main package.json versions
        id: get_package_versions
        run: |
          # read current version
          node -e "console.log(require('./package.json').version)" > ./.cur_version
          echo "cur_version=$(cat ./.cur_version)" >> $GITHUB_OUTPUT
          # fetch main and read its package.json version
          git fetch origin main --depth=1 || true
          git show origin/main:package.json > ./.main_package.json || true
          if [ -f ./.main_package.json ]; then
            node -e "console.log(require('././.main_package.json').version)" > ./.main_version || true
            echo "main_version=$(cat ./.main_version)" >> $GITHUB_OUTPUT
          else
            echo "main_version=" >> $GITHUB_OUTPUT
          fi

      - name: Decide if package.json version bumped
        id: version_check
        run: |
          cur=$(cat ./.cur_version || echo)
          main=$(cat ./.main_version || echo)
          echo "cur=$cur main=$main"
          if [ -z "$main" ] || [ "$cur" != "$main" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release when package.json changed
        if: steps.version_check.outputs.changed == 'true'
        id: prod_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_package_versions.outputs.cur_version }}
          name: "Release v${{ steps.get_package_versions.outputs.cur_version }}"
          body: |
            Release for version bump to v${{ steps.get_package_versions.outputs.cur_version }}. Created automatically because package.json changed.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload production release asset (dist)
        if: steps.version_check.outputs.changed == 'true' && steps.prod_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.prod_release.outputs.upload_url }}
          asset_path: ./dist/rutracker-chinese.user.js
          asset_name: rutracker-chinese.user.js
          asset_content_type: application/javascript
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload production release zip
        if: steps.version_check.outputs.changed == 'true' && steps.prod_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.prod_release.outputs.upload_url }}
          asset_path: ./dist/rutracker-chinese.zip
          asset_name: rutracker-chinese.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync dist from production release and commit if changed
        if: steps.version_check.outputs.changed == 'true' && steps.prod_release.outputs.upload_url
        run: |
          mkdir -p dist
          gh release download v${{ steps.get_package_versions.outputs.cur_version }} -n rutracker-chinese.user.js -D dist || true
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin main --depth=1 || true
          git add dist/rutracker-chinese.user.js || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(build): sync dist/rutracker-chinese.user.js from release-v${{ steps.get_package_versions.outputs.cur_version }} [skip ci]" || true
            git push origin HEAD:main || true
          else
            echo "No changes to dist/rutracker-chinese.user.js"
          fi

      - name: Upload prerelease asset (dist)
        if: steps.prerelease.outputs.id
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.prerelease.outputs.upload_url }}
          asset_path: ./dist/rutracker-chinese.user.js
          asset_name: rutracker-chinese.user.js
          asset_content_type: application/javascript
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload prerelease zip
        if: steps.prerelease.outputs.id
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.prerelease.outputs.upload_url }}
          asset_path: ./dist/rutracker-chinese.zip
          asset_name: rutracker-chinese.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync dist from prerelease and commit if changed
        if: steps.prerelease.outputs.id
        run: |
          mkdir -p dist
          # download the built userscript from the prerelease
          gh release download prerelease-${{ github.sha }} -n rutracker-chinese.user.js -D dist || true
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin main --depth=1 || true
          git add dist/rutracker-chinese.user.js || true
          # if there are staged changes, commit and push back to main (skip ci to avoid loops)
          if ! git diff --cached --quiet; then
            git commit -m "chore(build): sync dist/rutracker-chinese.user.js from prerelease-${{ github.sha }} [skip ci]" || true
            git push origin HEAD:main || true
          else
            echo "No changes to dist/rutracker-chinese.user.js"
          fi


